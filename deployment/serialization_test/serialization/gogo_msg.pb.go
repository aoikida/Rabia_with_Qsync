/*
    Copyright 2021 Rabia Research Team and Developers

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gogo_msg.proto

package serialization

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GoGoMsg struct {
	Key0 int64 `protobuf:"varint,1,opt,name=Key0,proto3" json:"Key0,omitempty"`
	Val0 int64 `protobuf:"varint,2,opt,name=Val0,proto3" json:"Val0,omitempty"`
}

func (m *GoGoMsg) Reset()      { *m = GoGoMsg{} }
func (*GoGoMsg) ProtoMessage() {}
func (*GoGoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_714e79ae9a23dfdc, []int{0}
}
func (m *GoGoMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoGoMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GoGoMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GoGoMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoGoMsg.Merge(m, src)
}
func (m *GoGoMsg) XXX_Size() int {
	return m.Size()
}
func (m *GoGoMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GoGoMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GoGoMsg proto.InternalMessageInfo

func (m *GoGoMsg) GetKey0() int64 {
	if m != nil {
		return m.Key0
	}
	return 0
}

func (m *GoGoMsg) GetVal0() int64 {
	if m != nil {
		return m.Val0
	}
	return 0
}

func init() {
	proto.RegisterType((*GoGoMsg)(nil), "serialization.GoGoMsg")
}

func init() { proto.RegisterFile("gogo_msg.proto", fileDescriptor_714e79ae9a23dfdc) }

var fileDescriptor_714e79ae9a23dfdc = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xcf, 0x4f, 0xcf,
	0x8f, 0xcf, 0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2d, 0x4e, 0x2d, 0xca,
	0x4c, 0xcc, 0xc9, 0xac, 0x4a, 0x2c, 0xc9, 0xcc, 0xcf, 0x93, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28,
	0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x07, 0xa9, 0xd4, 0x07, 0xab, 0x4a, 0x2a, 0x4d, 0x03, 0xf3,
	0xc0, 0x1c, 0x30, 0x0b, 0xa2, 0x5b, 0xc9, 0x90, 0x8b, 0xdd, 0x3d, 0xdf, 0x3d, 0xdf, 0xb7, 0x38,
	0x5d, 0x48, 0x88, 0x8b, 0xc5, 0x3b, 0xb5, 0xd2, 0x40, 0x82, 0x51, 0x81, 0x51, 0x83, 0x39, 0x08,
	0xcc, 0x06, 0x89, 0x85, 0x25, 0xe6, 0x18, 0x48, 0x30, 0x41, 0xc4, 0x40, 0x6c, 0x27, 0x93, 0x0b,
	0x0f, 0xe5, 0x18, 0x6e, 0x3c, 0x94, 0x63, 0xf8, 0xf0, 0x50, 0x8e, 0xb1, 0xe1, 0x91, 0x1c, 0xe3,
	0x8a, 0x47, 0x72, 0x8c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c,
	0xe3, 0x8b, 0x47, 0x72, 0x0c, 0x1f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1,
	0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0xfb, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xe9, 0x73, 0xd1, 0x41, 0xbf, 0x00, 0x00, 0x00,
}

func (this *GoGoMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GoGoMsg)
	if !ok {
		that2, ok := that.(GoGoMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key0 != that1.Key0 {
		return false
	}
	if this.Val0 != that1.Val0 {
		return false
	}
	return true
}
func (this *GoGoMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&serialization.GoGoMsg{")
	s = append(s, "Key0: "+fmt.Sprintf("%#v", this.Key0)+",\n")
	s = append(s, "Val0: "+fmt.Sprintf("%#v", this.Val0)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringGogoMsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *GoGoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoGoMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoGoMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Val0 != 0 {
		i = encodeVarintGogoMsg(dAtA, i, uint64(m.Val0))
		i--
		dAtA[i] = 0x10
	}
	if m.Key0 != 0 {
		i = encodeVarintGogoMsg(dAtA, i, uint64(m.Key0))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGogoMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovGogoMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GoGoMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key0 != 0 {
		n += 1 + sovGogoMsg(uint64(m.Key0))
	}
	if m.Val0 != 0 {
		n += 1 + sovGogoMsg(uint64(m.Val0))
	}
	return n
}

func sovGogoMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGogoMsg(x uint64) (n int) {
	return sovGogoMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GoGoMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoGoMsg{`,
		`Key0:` + fmt.Sprintf("%v", this.Key0) + `,`,
		`Val0:` + fmt.Sprintf("%v", this.Val0) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGogoMsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GoGoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGogoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoGoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoGoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key0", wireType)
			}
			m.Key0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGogoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val0", wireType)
			}
			m.Val0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGogoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val0 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGogoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGogoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGogoMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGogoMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGogoMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGogoMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGogoMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGogoMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGogoMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGogoMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGogoMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGogoMsg = fmt.Errorf("proto: unexpected end of group")
)
